<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE troubleshooting PUBLIC "-//OASIS//DTD DITA 1.3 Troubleshooting//EN" "troubleshooting.dtd">
<troubleshooting id="wa-troubleshoot-stuck-server">
  <title>Document Loading Freezes or Interaction Failures </title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>server hangs</indexterm>
        <indexterm>server crash</indexterm>
        <indexterm>server gets stuck</indexterm>
        <indexterm>server stops responding</indexterm>
        <indexterm>server does not accept requests</indexterm>
        <indexterm>infinite loading</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <troublebody>
    <condition id="problem">
      <title>Problem</title>
      <p id="p_qkb_1kt_mdc">When attempting to open a document, the browser freezes with the loading
        widget spinning indefinitely, or it may take an excessively long time to open.</p>
      <p id="p_rkb_1kt_mdc">This troubleshooting topic addresses scenarios where the server enters a
        state where it does not respond to client requests or when it responds with a significant
        delay, usually manifesting with an infinite spinner presented in the browser. Usually, when
        this happens, server resources are depleted, getting out of memory, exhausting CPU, or
        exhausting connections. When <ph keyref="webappProduct"/> has additional plugins and
        customizations installed, other than the built-in ones, it is crucial to determine whether
        the issue is caused by a faulty customization or an actual product bug. This topic provides
        guidance on identifying the problem and its cause. The target audience of this topic is an
        integrator who customized the application with custom Java or JavaScript plugins, but it can
        be followed by anyone who has general knowledge about how Java programs run (e.g. how the
        memory is allocated).<note id="note_m12_bkt_mdc">As a general consideration, if you manage
          to reproduce the problem consistently and have identified a concrete set of steps that
          reproduce the problem, please contact us on <xref
            href="https://www.oxygenxml.com/technical_support.html" format="html" scope="external"
            >Oxygen support team</xref>.</note></p>
    </condition>
    <troubleSolution>
      <cause id="cause_nvx_vjt_mdc">
        <title>Prerequisite</title>
        <p id="p_hsd_yjt_mdc">You must have SSH access to the machine where the <ph
            keyref="webappProduct"/> server is running.</p>
      </cause>
    </troubleSolution>
    <troubleSolution>
      <cause id="cause">
        <title>Cause 1 - Server runs out of memory</title>
        <p>The server exhausts the available RAM memory, leaving it unable to respond to upcoming
          requests. When a Java process runs out of Heap memory, the garbage collector runs
          intensively to free each piece of memory that can be freed, and the code usually
          encounters <codeph>java.lang.OutOfMemoryError</codeph> exceptions for various calls. </p>
      </cause>
      <remedy id="check_if_an_out_of_memory_error_is_reported_in_se">
        <title>Solution 1 - Check if an out of memory error is reported in server logs</title>
        <steps id="steps_mhb_f3z_ddc">
          <step>
            <cmd>Open the server logs by following the procedure in <xref
                href="web-author-logs.dita#web-author-logs/p_zpr_dgk_54b">How to Locate the Log File
                and the Log Configuration File</xref>.</cmd>
          </step>
          <step>
            <cmd>Check to see if the logs contain <codeph>java.lang.OutOfMemoryError</codeph>. If
              affirmative, an out of memory occurred.</cmd>
          </step>
        </steps>
      </remedy>
      <remedy id="check_heap_memory_using_jcmd">
        <title>Solution 2 - Check Heap memory using jcmd</title>
        <steps id="steps_esj_ljz_ddc">
          <step>
            <cmd>Open a terminal that gives access to a JDK inside the machine where the <ph
                keyref="webappProduct"/> server is running:</cmd>
            <substeps id="substeps_tyr_n2r_3dc">
              <substep>
                <cmd>Find the Java version for the server:</cmd>
                <info>
                  <ul id="ul_lx2_hcs_3dc">
                    <li>If the server was started from  the "<i>All Platforms</i>" distribution,
                      simply run <codeph>java -version</codeph>.</li>
                    <li>If the server was started from "<i>WAR</i>" distribution, then it depends on
                      the server container that is used, but usually you can run <codeph>java
                        -version</codeph>.</li>
                    <li>If the server was started from the "<i>Windows Installer</i>" or "<i>Linux
                        Installer</i>" distributions, open a terminal in the <codeph>Oxygen XML
                        Editor/jre/bin</codeph> subdirectory within the installation directory and
                      run <codeph>java -version</codeph>.</li>
                  </ul>
                </info>
              </substep>
              <substep>
                <cmd>Download a JDK with the same version as the one the server is running. Note
                  that a different version might also work but it has to be at least the same major
                  version.</cmd>
              </substep>
              <substep>
                <cmd>Move the JDK on the machine where the server is running.</cmd>
              </substep>
              <substep>
                <cmd>Open a terminal in the <codeph>bin</codeph> directory within the downloaded
                  JDK.</cmd>
              </substep>
            </substeps>
          </step>
          <step>
            <cmd>Find the PID of the server by running <codeph>jps</codeph>:</cmd>
            <info>
              <codeblock id="codeblock_fw4_4qz_ddc" outputclass="language-bourne">./JDK/bin>jps -l
12244 org.apache.catalina.startup.Bootstrap</codeblock>
            </info>
          </step>
          <step>
            <cmd>Run <codeph>jcmd</codeph>:</cmd>
            <info>
              <codeblock id="codeblock_vnb_1nz_ddc" outputclass="language-bourne">./oxygen-xml-web-author>jcmd &lt;PID> GC.heap_info
35268:
 garbage-first heap   total 75776K, used 22334K [0x0000000740000000, 0x0000000800000000)
  region size 1024K, 4 young (4096K), 0 survivors (0K)
 Metaspace       used 45037K, capacity 46179K, committed 46336K, reserved 1089536K
  class space    used 5048K, capacity 5564K, committed 5632K, reserved 1048576K</codeblock>
            </info>
          </step>
          <step>
            <cmd>Identify the total available memory and the used memory. In the above example, it
              is <i>75776K</i> total and <i>22334K</i> used.</cmd>
          </step>
          <step>
            <cmd>Check to see if the used memory is equal to or almost equal to the available
              memory. If affirmative, it is probably an ongoing out of memory issue.</cmd>
          </step>
        </steps>
      </remedy>
      <remedy id="remedy_ptg_frz_ddc">
        <title>Solution 3 - Check how many documents are opened using jmap</title>
        <steps id="steps_qtg_frz_ddc">
          <step>
            <cmd>For Windows, run:</cmd>
            <info>
              <codeblock id="codeblock_stg_frz_ddc" outputclass="language-bourne">./JDK/bin>jmap -histo 35268 | grep DocumentModel
 num     #instances         #bytes  class name (module)
-------------------------------------------------------
1845:             1             48  ro.sync.servlet.ServletDocumentModelCache</codeblock>
            </info>
          </step>
          <step>
            <cmd>For Linux, run:</cmd>
            <info>
              <codeblock id="codeblock_utg_frz_ddc" outputclass="language-bourne">./JDK/bin>jmap -histo &lt;PID> | grep DocumentModel
 num     #instances         #bytes  class name (module)
-------------------------------------------------------
1845:             1             48  ro.sync.servlet.ServletDocumentModelCache</codeblock>
            </info>
          </step>
          <step>
            <cmd>Considering that an average DITA file consumes about 10MB of RAM, you can multiply
              the number of documents by 10MB to find an estimation of the memory that the documents
              occupy.</cmd>
          </step>
          <step>
            <cmd>If the number of opened documents is large, consider increasing the memory.</cmd>
          </step>
        </steps>
      </remedy>
      <remedy id="remedy_gzg_frz_ddc">
        <title>Solution 4 - Inspect what occupies memory by obtaining a Heap Dump</title>
        <steps id="steps_hzg_frz_ddc">
          <step>
            <cmd>Run <codeph>jmap</codeph> to obtain a Heap Dump:</cmd>
            <info>
              <codeblock id="codeblock_nzg_frz_ddc" outputclass="language-bourne">./JDK/bin>jmap -dump:live,format=b,file=heap.bin &lt;PID>
Heap dump file created</codeblock>
            </info>
          </step>
          <step>
            <cmd>Open the generated <filepath>heap.bin</filepath> file in a tool that can analyze
              Java Heap Dumps and check if the memory is occupied by objects from a custom plugin or
              customization.</cmd>
          </step>
        </steps>
      </remedy>
      <remedy id="solution1">
        <title>Solution 5 - Increase memory</title>
        <steps-informal id="steps-informal_g4v_khz_ddc">
          <p id="p_chr_pmt_mdc">If you concluded that the problem was caused by a justified lack of
            memory, increase the memory by following the instructions from: <xref
              href="webauthor-increase-memory.dita"/>.</p>
        </steps-informal>
      </remedy>
    </troubleSolution>
    <troubleSolution>
      <cause id="cause_i25_lkz_ddc">
        <title>Cause 2 - Server runs out of CPU</title>
        <p>In some cases, the slowness of the server is caused by the exhaustion of the CPU by a
          large number of threads.</p>
      </cause>
      <remedy id="solution_1__inspect_the_threads">
        <title>Solution 1 - Inspect the threads</title>
        <steps-informal id="steps-informal_frf_43r_3dc">
          <p>Inspect the threads by looking for their name and their stack-trace to identify if they
            are initiated from custom plugins. If affirmative, continue troubleshooting the plugin's
            code.</p>
        </steps-informal>
      </remedy>
      <remedy id="solution_2__obtain_a_thread_dump">
        <title>Solution 2 - Obtain a thread dump</title>
        <steps-informal id="steps-informal_wbq_pjr_3dc">
          <p id="p_bsq_ymt_mdc">To obtain a thread dump, you can either use <codeph>pkill -3
              &lt;PID></codeph> that outputs the dump to server logs or use
            <codeph>jstack</codeph>:<codeblock id="codeblock_scy_mlz_ddc" outputclass="language-bourne">./oxygen-xml-web-author>jstack &lt;PID>
2024-10-25 15:36:06
Full thread dump OpenJDK 64-Bit Server VM (11.0.2+9 mixed mode):

Threads class SMR info:
_java_thread_list=0x0000023dc40e74d0, length=47, elements={
0x0000023da0a9f000, 0x0000023dc27a4800, 0x0000023dc27d0800, 0x0000023dc2832000,
0x0000023dc2833000, 0x0000023dc2834000, 0x0000023dc27e6000, 0x0000023dc2837000,
0x0000023dc29a0000, 0x0000023dc2a2e800, 0x0000023dc2d08000, 0x0000023dc3520800,
0x0000023dc5c41000, 0x0000023dc38da800, 0x0000023dc3e1b000, 0x0000023dc3da4000,
0x0000023dc3da4800, 0x0000023dc3f33800, 0x0000023dc41e9800, 0x0000023dc41ec000,
0x0000023dc41e6800, 0x0000023dc41ed000, 0x0000023dc41e7800, 0x0000023dc58eb000,
0x0000023dc58f0800, 0x0000023dc58ee000, 0x0000023dc58ef800, 0x0000023dc58ec800,
0x0000023dc58ed000, 0x0000023dc58ef000, 0x0000023dc58f1800, 0x0000023dc58eb800,
0x0000023dc58f2000, 0x0000023dc58f5800, 0x0000023dc58f6000, 0x0000023dc58f7000,
0x0000023dc58f3000, 0x0000023dc58f4000, 0x0000023dc58f8000, 0x0000023dc58f9800,
0x0000023dc58f8800, 0x0000023dc58f4800, 0x0000023dc3361000, 0x0000023dc3360800,
0x0000023dc3367800, 0x0000023dc3362800, 0x0000023dc3363800
}

"main" #1 prio=5 os_prio=0 cpu=10687.50ms elapsed=568.65s tid=0x0000023da0a9f000 nid=0x32bc runnable  [0x0000006be67fe000]
   java.lang.Thread.State: RUNNABLE
        at java.net.PlainSocketImpl.accept0(java.base@11.0.2/Native Method)
        at java.net.PlainSocketImpl.socketAccept(java.base@11.0.2/PlainSocketImpl.java:159)
        at java.net.AbstractPlainSocketImpl.accept(java.base@11.0.2/AbstractPlainSocketImpl.java:458)
        at java.net.ServerSocket.implAccept(java.base@11.0.2/ServerSocket.java:551)
        at java.net.ServerSocket.accept(java.base@11.0.2/ServerSocket.java:519)
        at org.apache.catalina.core.StandardServer.await(StandardServer.java:565)
        at org.apache.catalina.startup.Catalina.await(Catalina.java:825)
        at org.apache.catalina.startup.Catalina.start(Catalina.java:773)
        at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(java.base@11.0.2/Native Method)
        at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(java.base@11.0.2/NativeMethodAccessorImpl.java:62)
        at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(java.base@11.0.2/DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(java.base@11.0.2/Method.java:566)
        at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:345)
        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:473)

"Reference Handler" #2 daemon prio=10 os_prio=2 cpu=0.00ms elapsed=568.62s tid=0x0000023dc27a4800 nid=0x9284 waiting on condition  [0x0000006be6efe000]
   java.lang.Thread.State: RUNNABLE
        at java.lang.ref.Reference.waitForReferencePendingList(java.base@11.0.2/Native Method)
        at java.lang.ref.Reference.processPendingReferences(java.base@11.0.2/Reference.java:241)
        at java.lang.ref.Reference$ReferenceHandler.run(java.base@11.0.2/Reference.java:213)</codeblock></p>
        </steps-informal>
      </remedy>
    </troubleSolution>
    <troubleSolution>
      <cause id="cause_iy5_lkz_ddc">
        <title>Cause 3 - Server runs out of connections</title>
        <p>The server has a limited number of connections to receive incoming requests. The default
          limit for requests when <ph keyref="webappProduct"/> is started inside Tomcat is 200.</p>
        <p>When all connections are occupied, the server is not able to respond to client
          requests.</p>
      </cause>
      <remedy id="remedy_vbm_jzq_3dc">
        <title>Solution 1 - Inspect available connections</title>
        <steps-informal id="steps-informal_vzv_lzq_3dc">
          <p>The number of available connections can be found using the <xref
              href="https://github.com/oxygenxml/web-author-monitoring-plugin" format="html"
              scope="external">web-author-monitoring-plugin</xref> that logs some metrics to the
            standard output periodically and you can look for the
              "<i>webauthor-http_conn_pool_available</i>" metric that shows the available
            connections.</p>
          <p>There are also a few related metrics that may help:</p>
          <p>
            <ul id="ul_vld_4zq_3dc">
              <li><i>webauthor-http_conn_pool_pending</i> - The number of pending connections.</li>
              <li><i>webauthor-http_conn_pool_leased</i> - The number of occupied connections.</li>
              <li><i>webauthor-http_conn_pool_max</i> - The maximum number of accepted
                connections.</li>
            </ul>
          </p>
        </steps-informal>
      </remedy>
      <remedy id="remedy_jy5_lkz_ddc">
        <title>Solution 2 - Inspecting connections</title>
        <steps-informal id="steps-informal_ky5_lkz_ddc">
          <p>Each connection is kept open by a thread, so to find the number of open connections,
            simply count how many threads have the name like <codeph>http-nio-8080-exec-10</codeph>,
            where the trailing number varies.</p>
          <p>If it is confirmed that all server connections are exhausted, inspect the threads that
            hold connections open, look in their stack-trace and check if the thread is opened from
            a custom plugin. If the connections are kept open by threads started from custom
            plugins, continue troubleshooting the problem in the plugin's code.</p>
        </steps-informal>
      </remedy>
    </troubleSolution>
  </troublebody>
  <related-links>
    <link href="wa-browser-out-of-memory.dita"/>
    <link href="webauthor-increase-memory.dita"/>
    <link href="webapp-loadbalancing.dita"/>
  </related-links>
</troubleshooting>
